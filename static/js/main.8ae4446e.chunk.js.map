{"version":3,"sources":["pages/navbar/Navbar.js","pages/product/Product.js","pages/market/Order.js","pages/market/Item.js","pages/market/List.js","pages/market/Market.js","pages/home/Home.js","pages/connect/Connect.js","pages/social/Post.js","pages/social/Feed.js","pages/social/Social.js","main.js","index.js","contracts/contractInstance.js","contracts/web3.js","contracts/ipfs.js","api.js"],"names":["Navbar","className","to","Product","Order","add","wallet","useWallet","account","useState","caption","setCaption","image","setImage","status","type","value","onChange","e","target","accept","reader","FileReader","onload","result","readAsDataURL","files","onClick","prevData","id","v4","Item","itemId","itemAccount","itemCaption","itemImage","deleteItemData","src","alt","prev","filter","item","class","List","listData","deleteData","map","Market","date","setDate","Home","Connect","blockNumber","getBlockNumber","balance","networkName","reset","connect","Post","props","state","handleCaptionChange","bind","handlePhotoChange","handleSubmit","event","captureCaption","console","log","captureFile","alert","this","preventDefault","handleOk","onSubmit","name","React","Component","Blog","content","posts","post","key","getList","a","getPosts","Feed","init","created","Social","Main","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","web3","eth","Contract","currentWeb3","Web3","require","window","ethereum","instance","enable","error","currentProvider","ipfs","IPFS","host","port","protocol","buffer","file","readAsArrayBuffer","onloadend","convertToBuffer","_caption","Buffer","from","then","hashedImg","imgHash","hash","bufferDesc","hashedText","textHash","contract","methods","sendHash","send","transactionHash","once","updateAccount","getAccounts","accounts","_account","getCounter","call","counter","hashes","captions","i","push","getHash","Promise","all","postHashes","length","fetch","text","res","postCaptions","img"],"mappings":"qPAiCeA,EA7BA,WACb,OACE,mCACE,sBAAKC,UAAU,cAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,cAAvB,SACE,4CACY,mBAAGA,UAAU,8BAG3B,gCAIE,cAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,YAA7B,oBAGA,cAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,YAA7B,6BCdKE,G,OAJC,WACd,OAAO,qBAAKF,UAAU,gBAAf,uB,4BCuEMG,G,OApED,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACTC,EAASC,cACTC,EAAUF,EAAOE,QAEvB,EAA8BC,mBAAS,iBAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,MAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAuBA,OACE,sBAAKZ,UAAU,cAAf,UACE,sBAAKA,UAAU,aAAf,UACE,sBAAMA,UAAU,mBAAhB,qBACmB,cAAlBK,EAAOQ,OACN,8BAAMR,EAAOE,UAEb,kDAGJ,sBAAKP,UAAU,aAAf,UACE,sBAAMA,UAAU,mBAAhB,qBACA,uBACEA,UAAU,mBACVc,KAAK,OACLC,MAAON,EACPO,SA3CR,SAAuBC,GACrBP,EAAWO,EAAEC,OAAOH,aA6ClB,sBAAKf,UAAU,aAAf,UACE,sBAAMA,UAAU,mBAAhB,mBAEA,uBACEA,UAAU,mBACVc,KAAK,OACLK,OAAO,iCACPH,SAhDR,SAAqBC,GACnB,IAAIG,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUL,GACxBL,EAASK,EAAEC,OAAOK,SAEpBH,EAAOI,cAAcP,EAAEC,OAAOO,MAAM,UA+ClC,wBAAQC,QA5CZ,WACEtB,GAAI,SAAUuB,GACZ,MAAM,GAAN,mBACKA,GADL,CAEE,CACEC,GAAIC,cACJtB,UACAE,UACAE,eAoCsBX,UAAU,YAApC,wBCpCS8B,G,OA9BF,SAAC,GAMP,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,UACAC,EACI,EADJA,eAQA,OACE,sBAAKnC,UAAU,aAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,gCACE,qBAAKA,UAAU,kBAAf,SAAkCgC,IAClC,qBAAKhC,UAAU,kBAAf,SAAkCiC,IAClC,qBAAKjC,UAAU,wBAAf,SACE,qBAAKA,UAAU,iBAAiBoC,IAAKF,EAAWG,IAAI,YAI1D,wBAAQX,QAjBZ,WACES,GAAe,SAAUG,GACvB,OAAOA,EAAKC,QAAO,SAACC,GAAD,OAAUA,EAAKZ,KAAOG,SAeZ/B,UAAU,kBAAvC,SACE,mBAAGyC,MAAM,yCCJFC,G,OApBF,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACxB,OACE,qBAAK5C,UAAU,aAAf,SACG2C,EAASE,KAAI,SAACL,GACb,IAAQjC,EAAgCiC,EAAhCjC,QAASE,EAAuB+B,EAAvB/B,QAASE,EAAc6B,EAAd7B,MAAOiB,EAAOY,EAAPZ,GACjC,OACE,cAAC,EAAD,CAEEG,OAAQH,EACRI,YAAazB,EACb0B,YAAaxB,EACbyB,UAAWvB,EACXwB,eAAgBS,GALXhB,UCMFkB,G,OAVA,WACb,MAAwBtC,mBAAS,IAAjC,mBAAOuC,EAAP,KAAaC,EAAb,KAEA,OACE,sBAAKhD,UAAU,eAAf,UACE,cAAC,EAAD,CAAOI,IAAK4C,IACZ,cAAC,EAAD,CAAML,SAAUI,EAAMH,WAAYI,SCNzBC,G,OAJF,WACX,OAAO,qBAAKjD,UAAU,aAAf,oBCsCMkD,G,OApCC,WACd,IAAM7C,EAASC,cACT6C,EAAc9C,EAAO+C,iBAE3B,OACE,mCACE,sBAAKpD,UAAU,gBAAf,UACE,6BACE,sBAAMA,UAAU,sBAAhB,8BAEiB,cAAlBK,EAAOQ,OACN,gCACE,sBAAKb,UAAU,qBAAf,UACE,4CAAeK,EAAOE,WACtB,4CAAeF,EAAOgD,QAAtB,UACA,yCAAYhD,EAAOS,QACnB,4CAAeT,EAAOiD,eACtB,gDAAmBH,QAErB,wBAAQnD,UAAU,cAAc0B,QAAS,kBAAMrB,EAAOkD,SAAtD,2BAKF,8BACE,wBAAQvD,UAAU,cAAc0B,QAAS,kBAAMrB,EAAOmD,WAAtD,0C,2FCmBGC,E,kDA5Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXlD,QAAS,aAGX,EAAKmD,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBARH,E,uDAWnB,SAAoBG,GAElBC,YAAeD,EAAM9C,OAAOH,S,+BAG9B,SAAkBiD,GAChBE,QAAQC,IAAIH,EAAM9C,OAAOO,MAAM,IAE/B2C,YAAYJ,EAAM9C,OAAOO,MAAM,M,0BAGjC,SAAauC,GACXK,MAAM,6BAA+BC,KAAKX,MAAMlD,SAChDuD,EAAMO,iBACNC,gB,oBAGF,WACE,OACE,uBAAMC,SAAUH,KAAKP,aAArB,UACE,6CAEE,0BAAUnC,GAAG,UAAU8C,KAAK,UAAU1D,SAAUsD,KAAKV,yBAEvD,2CAEE,uBAAO9C,KAAK,OAAQE,SAAUsD,KAAKR,uBAErC,uBAAOhD,KAAK,SAASC,MAAM,kB,GAxChB4D,IAAMC,W,QCCzB,SAASC,EAAKnB,GACZ,IAAMoB,EAAUpB,EAAMqB,MAAMlC,KAAI,SAACmC,GAAD,OAC9B,gCACE,qBAAK5C,IAAK4C,EAAK5C,MACf,4BAAI4C,EAAKvE,YAFDuE,EAAKC,QAKjB,OACE,8BACGH,IAKP,IAAIC,EAAQ,GAENG,EAAO,uCAAG,sBAAAC,EAAA,sEAEAC,cAFA,OAEdL,EAFc,kDAAH,qDAKbG,IACA,IAUeG,EAVF,WAEX,OAAQ,8BACE,sBAAKrF,UAAU,aAAf,iBACE,cAAC6E,EAAD,CAAME,MAAOA,UCvBrBO,EAAI,uCAAG,sBAAAH,EAAA,sDAEXI,cAFW,2CAAH,qDAOVD,IACA,IAWeE,EAXA,WAEb,OAAQ,gCACE,oBAAIxF,UAAU,eAAd,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,QCKGyF,MAhBf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3C,IACjC,cAAC,IAAD,CAAOyC,KAAK,WAAWC,OAAK,EAACC,UAAW1F,IACxC,cAAC,IAAD,CAAOwF,KAAK,UAAUC,OAAK,EAACC,UAAW9C,IACvC,cAAC,IAAD,CAAO4C,KAAK,UAAUC,OAAK,EAACC,UAAWJ,IACvC,cAAC,IAAD,CAAOE,KAAK,WAAWC,OAAK,EAACC,UAAW1C,aCblD2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,iCCV1B,aAyEe,QAAIC,IAAKC,IAAIC,SArEhB,CACX,CACC,WAAa,EACb,OAAU,GACV,KAAQ,UACR,KAAQ,SAET,CACC,OAAU,GACV,KAAQ,aACR,QAAW,CACV,CACC,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGV,gBAAmB,OACnB,KAAQ,YAET,CACC,OAAU,CACT,CACC,aAAgB,UAChB,KAAQ,SACR,KAAQ,YAGV,KAAQ,UACR,QAAW,CACV,CACC,aAAgB,SAChB,KAAQ,MACR,KAAQ,UAET,CACC,aAAgB,SAChB,KAAQ,OACR,KAAQ,UAET,CACC,aAAgB,UAChB,KAAQ,QACR,KAAQ,YAGV,gBAAmB,OACnB,KAAQ,YAET,CACC,OAAU,CACT,CACC,aAAgB,SAChB,KAAQ,OACR,KAAQ,UAET,CACC,aAAgB,SAChB,KAAQ,QACR,KAAQ,WAGV,KAAQ,WACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,aAlEM,+C,iCCHhB,IAMIC,EANAC,EAAOC,EAAQ,KAQnB,GAAIC,OAAOC,SAAU,CACjB,IAAIC,EAAW,IAAIJ,EAAKE,OAAOC,UAC/B,IAEID,OAAOC,SAASE,SAEhBN,EAAcK,EAChB,MAAOE,GAELvC,MAAM,iDAEHmC,OAAON,KACdG,EAAc,IAAIC,EAAKA,EAAKO,iBAI5B3C,QAAQC,IAAI,uEAGDkC,O,qDC5Bf,aAOMS,EAAO,IAPb,OAOiBC,GAAK,CAAEC,KAAM,iBAAkBC,KAAM,KAAMC,SAAU,UACvDJ,O,y7BCLXvG,EAAU,GACV4G,EAAS,GACT1G,EAAU,GAcF2D,EAAc,SAACgD,GACnB,IAAMhG,EAAS,IAAIC,WACC,qBAAT+F,GACThG,EAAOiG,kBAAkBD,GACzBhG,EAAOkG,UAAP,sBAAmB,sBAAAnC,EAAA,sEACFoC,EAAgBnG,EAAOG,QADrB,OACjB4F,EADiB,mDAGdA,EAAS,IAGZlD,EAAiB,SAACuD,GACpB/G,EAAU+G,GAOVD,EAAe,uCAAG,WAAOnG,GAAP,SAAA+D,EAAA,+EACbsC,EAAOC,KAAKtG,IADC,2CAAH,sDASfqD,EAAQ,uCAAG,4BAAAU,EAAA,sDACbd,MAAM,yBACI,EAGdyC,IAAK1G,IAAI+G,GAAQQ,MAAK,SAACC,GAGf,OAFAC,EAAUD,EAAU,GAAGE,KACvB5D,QAAQC,IAAI0D,GACLN,EAAgB9G,MACtBkH,MAAK,SAAAI,GAAU,OAAIjB,IAAK1G,IAAI2H,GAC5BJ,MAAK,SAAAK,GAAU,OAAIA,EAAW,GAAGF,WAAOH,MAAK,SAACM,GAC/CC,IAASC,QACNC,SAASP,EAASI,GAClBI,KAAK,CAAEX,KAAMnH,IACZ,SAACqG,EAAO0B,GACyB,qBAApBA,IACTjE,MAAM,0BACN6D,IAASK,KAAK,UACZ,CAAEb,KAAMnH,IACR,WACE6E,IACAf,MAAM,0CAGJ,QAxBL,2CAAH,qDAiCNG,EAAW,WAIV2C,GAAW1G,EAGdgE,IAFAJ,MAAM,oCAMJkB,EAAO,uCAAG,sBAAAJ,EAAA,sEACRqD,IADQ,uBAERpD,IAFQ,2CAAH,qDAKPoD,EAAa,uCAAG,8BAAArD,EAAA,sEACGe,IAAKC,IAAIsC,cADZ,cACdC,EADc,OAEdC,EAAWD,EAAS,GAE1BnI,EAAUoI,EAJU,kBAKbA,GALa,2CAAH,qDAQfvD,EAAQ,uCAAG,4CAAAD,EAAA,6DACH,EACJJ,EAAQ,GAFD,SAGSmD,IAASC,QAAQS,aAAaC,KAAK,CACvDnB,KAAMnH,IAJK,UAGPuI,EAHO,OAOb5E,QAAQC,IAAI2E,GAEI,OAAZA,EATS,iBAYX,IAFMC,EAAS,GACTC,EAAW,GACRC,EAAIH,EAASG,GAAK,EAAGA,GAAK,EACjCF,EAAOG,KAAKhB,IAASC,QAAQgB,QAAQF,GAAGJ,KAAK,CAC3CnB,KAAMnH,KAdC,iBAkBc6I,QAAQC,IAAIN,GAlB1B,QAoBX,IAFMO,EAlBK,OAoBFL,EAAI,EAAGA,EAAIK,EAAWC,OAAQN,GAAK,EAC1CD,EAASE,KAAKM,MAAM,gCAAD,OAAiCF,EAAWL,GAAGQ,OAC/D9B,MAAK,SAAA+B,GAAG,OAAIA,EAAID,WAtBV,iBAyBgBL,QAAQC,IAAIL,GAzB5B,QA2BX,IAFMW,EAzBK,OA2BFV,EAAI,EAAGA,EAAIK,EAAWC,OAAQN,GAAK,EAC1ClE,EAAMmE,KAAK,CACTtH,GAAIqH,EACJhE,IAAI,MAAD,OAAQgE,GACXxI,QAASkJ,EAAaV,GACtB7G,IAAI,gCAAD,OAAkCkH,EAAWL,GAAGW,QAK/C,EArCG,iCAwCN7E,GAxCM,4CAAH,uD","file":"static/js/main.8ae4446e.chunk.js","sourcesContent":["import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n  return (\n    <>\n      <nav className=\"navbar-item\">\n        <Link to=\"/\" className=\"navbar-logo\">\n          <h1>\n            Instachain<i className=\"fab fa-ethereum logo\"></i>\n          </h1>\n        </Link>\n        <div>\n          {/* <Link to=\"/Product\" className=\"menu-icon\">\n            Product\n          </Link> */}\n          <Link to=\"/Social\" className=\"menu-icon\">\n            Social\n          </Link>\n          <Link to=\"/Market\" className=\"menu-icon\">\n            Market\n          </Link>\n        </div>\n        {/* <div className=\"menu-icon \">\n          <Link to=\"/Connect\" className=\"navbar-logo\">\n            <i className=\"fas fa-link \"></i>\n          </Link>\n        </div> */}\n      </nav>\n    </>\n  );\n};\nexport default Navbar;\n","import \"./Product.css\";\n\nconst Product = () => {\n  return <div className=\"product-index\">Product</div>;\n};\n\nexport default Product;\n","import { useState } from \"react\";\nimport { v4 } from \"uuid\";\nimport { useWallet } from \"use-wallet\";\n\nimport \"./Order.css\";\n\nconst Order = ({ add }) => {\n  const wallet = useWallet();\n  const account = wallet.account;\n\n  const [caption, setCaption] = useState(\"Hello World !\");\n  function captionChange(e) {\n    setCaption(e.target.value);\n  }\n\n  const [image, setImage] = useState(\"\");\n  function imageChange(e) {\n    let reader = new FileReader();\n    reader.onload = function (e) {\n      setImage(e.target.result);\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  }\n\n  function addItem() {\n    add(function (prevData) {\n      return [\n        ...prevData,\n        {\n          id: v4(),\n          account,\n          caption,\n          image,\n        },\n      ];\n    });\n  }\n\n  return (\n    <div className=\"order-index\">\n      <div className=\"order-item\">\n        <span className=\"order-item-title\">account</span>\n        {wallet.status === \"connected\" ? (\n          <div>{wallet.account}</div>\n        ) : (\n          <div> no connect </div>\n        )}\n      </div>\n      <div className=\"order-item\">\n        <span className=\"order-item-title\">caption</span>\n        <input\n          className=\"order-item-input\"\n          type=\"text\"\n          value={caption}\n          onChange={captionChange}\n        />\n      </div>\n      <div className=\"order-item\">\n        <span className=\"order-item-title\">Image</span>\n\n        <input\n          className=\"order-item-input\"\n          type=\"file\"\n          accept=\".jpg,.jpeg,.gif,.png,.mov,.mp4\"\n          onChange={imageChange}\n        />\n      </div>\n\n      <button onClick={addItem} className=\"order-btn\">\n        Order\n      </button>\n    </div>\n  );\n};\nexport default Order;\n","import \"./Item.css\";\n\nconst Item = ({\n  itemId,\n  itemAccount,\n  itemCaption,\n  itemImage,\n  deleteItemData,\n}) => {\n  function deleteItem() {\n    deleteItemData(function (prev) {\n      return prev.filter((item) => item.id !== itemId);\n    });\n  }\n\n  return (\n    <div className=\"item-index\">\n      <div className=\"item-index-item\">\n        <div>\n          <div className=\"item-index-item\">{itemAccount}</div>\n          <div className=\"item-index-item\">{itemCaption}</div>\n          <div className=\"item-index-img-border\">\n            <img className=\"item-index-img\" src={itemImage} alt=\"\" />\n          </div>\n        </div>\n      </div>\n      <button onClick={deleteItem} className=\"item-delete-btn\">\n        <i class=\"fas fa-times item-delete-icon\"></i>\n      </button>\n    </div>\n  );\n};\nexport default Item;\n","import Item from \"./Item\";\nimport \"./List.css\";\n\nconst List = ({ listData, deleteData }) => {\n  return (\n    <div className=\"list-index\">\n      {listData.map((item) => {\n        const { account, caption, image, id } = item;\n        return (\n          <Item\n            key={id}\n            itemId={id}\n            itemAccount={account}\n            itemCaption={caption}\n            itemImage={image}\n            deleteItemData={deleteData}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default List;\n","import Order from \"./Order\";\nimport List from \"./List\";\nimport { useState } from \"react\";\n\nimport \"./Market.css\";\n\nconst Market = () => {\n  const [date, setDate] = useState([]);\n\n  return (\n    <div className=\"market-index\">\n      <Order add={setDate} />\n      <List listData={date} deleteData={setDate} />\n    </div>\n  );\n};\nexport default Market;\n","import \"./Home.css\";\n\nconst Home = () => {\n  return <div className=\"home-index\">Home</div>;\n};\n\nexport default Home;\n","import React from \"react\";\nimport { useWallet } from \"use-wallet\";\n\nimport \"./Connect.css\";\n\nconst Connect = () => {\n  const wallet = useWallet();\n  const blockNumber = wallet.getBlockNumber();\n\n  return (\n    <>\n      <div className=\"connect-index\">\n        <h1>\n          <span className=\"connect-index-title\">Connect Wallet</span>\n        </h1>\n        {wallet.status === \"connected\" ? (\n          <div>\n            <div className=\"connect-index-text\">\n              <div>Account: {wallet.account}</div>\n              <div>Balance: {wallet.balance} WEI</div>\n              <div>Type: {wallet.type}</div>\n              <div>Network: {wallet.networkName}</div>\n              <div>BlockNumber: {blockNumber}</div>\n            </div>\n            <button className=\"cnt-wlt-btn\" onClick={() => wallet.reset()}>\n              Disconnect\n            </button>\n          </div>\n        ) : (\n          <div>\n            <button className=\"cnt-wlt-btn\" onClick={() => wallet.connect()}>\n              Connect to MetaMask\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\n// Wrap everything in <UseWalletProvider />\nexport default Connect;\n","import React from \"react\"\nimport \"./Post.css\"\nimport {captureCaption, captureFile, handleOk} from \"../../api\"\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      caption: 'Caption..'\n    };\n\n    this.handleCaptionChange = this.handleCaptionChange.bind(this);\n    this.handlePhotoChange = this.handlePhotoChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleCaptionChange(event) {\n    // this.setState({caption: event.target.value});\n    captureCaption(event.target.value)\n  }\n\n  handlePhotoChange(event) {\n    console.log(event.target.files[0])\n    // this.setState({photo: event.target.files[0]});\n    captureFile(event.target.files[0])\n  }\n\n  handleSubmit(event) {\n    alert('An caption was submitted: ' + this.state.caption);\n    event.preventDefault();\n    handleOk();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Caption:\n          <textarea id=\"caption\" name=\"caption\" onChange={this.handleCaptionChange} />\n        </label>\n        <label>\n          Photo:\n          <input type=\"file\"  onChange={this.handlePhotoChange}></input>\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\nexport default Post","import \"./Feed.css\";\n\nimport {getPosts, updateAccount} from \"../../api\"\n\n\nfunction Blog(props) {\n  const content = props.posts.map((post) =>\n    <div key={post.key}>\n      <img src={post.src}/>\n      <p>{post.caption}</p>\n    </div>\n  );\n  return (\n    <div>\n      {content}\n    </div>\n  );\n}\n\nlet posts = [];\n\nconst getList = async ()=>{\n\n  posts = await getPosts();\n  \n}\ngetList()\nconst Feed = () => {\n  \n  return (<div>\n            <div className=\"feed-index\">Feed\n              <Blog posts={posts} />\n            </div>\n            \n          </div>);\n};\n\nexport default Feed;\n","import \"./Social.css\";\n\nimport Post from \"./Post\";\nimport Feed from \"./Feed\";\nimport { created } from \"../../api\";\n// import Create from \"../../api\"\n\n\nconst init = async ()=>{\n\n  created();\n  \n}\n\n\ninit()\nconst Social = () => {\n\n  return (<div>\n            <h5 className=\"social-index\">Decentralized Social Network</h5>\n            <Post></Post>\n            <Feed></Feed>\n         </div>);\n};\n\n\n\nexport default Social;\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { UseWalletProvider } from \"use-wallet\";\n\nimport Navbar from \"./pages/navbar/Navbar\";\nimport Product from \"./pages/product/Product\";\nimport Market from \"./pages/market/Market\";\nimport Home from \"./pages/home/Home\";\nimport Connect from \"./pages/connect/Connect\";\nimport Social from \"./pages/social/Social\";\n\nfunction Main() {\n  return (\n    <UseWalletProvider>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/Product\" exact component={Product} />\n          <Route path=\"/Market\" exact component={Market} />\n          <Route path=\"/Social\" exact component={Social} />\n          <Route path=\"/Connect\" exact component={Connect} />\n        </Switch>\n      </Router>\n    </UseWalletProvider>\n  );\n}\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport Main from \"./main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","\nimport web3 from './web3';\n\n\nconst address = \"0x21D1a24521Bb8bb8cabD4a8FE0B0d6C673F49e38\";\nconst abi = [\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"NewPost\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"getCounter\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_index\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getHash\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"img\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"text\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_img\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_text\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"sendHash\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t}\n];\n\nexport default new web3.eth.Contract(abi, address);\n","//imports the Web3 API\nvar Web3 = require('web3');\n\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\nlet currentWeb3;\n\nif (window.ethereum) {\n    let instance = new Web3(window.ethereum);\n    try {\n        // Request account access if needed\n        window.ethereum.enable();\n        // Acccounts now exposed\n        currentWeb3 = instance;\n    } catch (error) {\n        // User denied account access...\n        alert('Please allow access for the app to work');\n    }\n} else if (window.web3) {\n    currentWeb3 = new Web3(Web3.currentProvider);\n    // Acccounts always exposed\n}\nelse {\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n}\n\nexport default currentWeb3;","//imports the IPFS API\nimport IPFS from 'ipfs-http-client';\n\n/**\n * creates & exports new instance for \n * IPFS using infura as host, for use.\n */\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\nexport default ipfs;\n","import web3 from './contracts/web3';\nimport ipfs from './contracts/ipfs';\nimport contract from './contracts/contractInstance';\nlet account = \"\"\nlet buffer = \"\"\nlet caption = \"\"\nlet loading = false\n\n    // data variables\n    // const data = ()=>{\n    //   return {\n    //     buffer: '',\n    //     caption: '',\n    //   };\n    // }\n\n      /* used to catch chosen image &\n       * convert it to ArrayBuffer.\n       */\n      const captureFile = (file)=>{\n        const reader = new FileReader();\n        if (typeof file !== 'undefined') {\n          reader.readAsArrayBuffer(file);\n          reader.onloadend = async () => {\n            buffer = await convertToBuffer(reader.result);\n          };\n        } else buffer = '';\n      }\n\n      const captureCaption = (_caption)=>{\n          caption = _caption\n      }\n\n      /**\n       * converts ArrayBuffer to\n       * Buffer for IPFS upload.\n       */\n    const convertToBuffer = async (reader)=>{\n        return Buffer.from(reader);\n      }\n\n      /**\n       * submits buffered image & text to IPFS\n       * and retrieves the hashes, then store\n       * it in the Contract via sendHash().\n       */\n    const onSubmit = async ()=>{\n        alert('Uploading on IPFS...');\n        loading = true;\n        let imgHash;\n\n    ipfs.add(buffer).then((hashedImg) => {\n            imgHash = hashedImg[0].hash;\n            console.log(imgHash)\n            return convertToBuffer(caption);\n          }).then(bufferDesc => ipfs.add(bufferDesc)\n            .then(hashedText => hashedText[0].hash)).then((textHash) => {\n            contract.methods\n              .sendHash(imgHash, textHash)\n              .send({ from: account },\n                (error, transactionHash) => {\n                  if (typeof transactionHash !== 'undefined') {\n                    alert('Storing on Ethereum...');\n                    contract.once('NewPost',\n                      { from: account },\n                      () => {\n                        getPosts();\n                        alert('Operation Finished! Refetching...');\n                      });\n                  } \n                loading = false;\n                });\n          });\n      }\n\n      /**\n       * validates if image & captions\n       * are filled before submission.\n       */\n      const handleOk = ()=>{\n        //   console.log(_file)\n        //   let _buffer = captureFile(_file);\n        //   console.log(!_buffer)\n        if (!buffer || !caption) {\n          alert('Please fill in the information.');\n        } else {\n          onSubmit();\n        }\n      }\n\n      const created = async ()=>{\n        await updateAccount();\n        await getPosts();\n      }\n\n      const updateAccount = async()=>{ \n        const accounts = await web3.eth.getAccounts();\n        const _account = accounts[0];\n        // this.currentAccount = account;\n        account = _account\n        return _account\n      }\n\n    const getPosts = async()=>{\n        loading = false;\n        const posts = [];\n        const counter = await contract.methods.getCounter().call({\n          from: account,\n        });\n\n        console.log(counter)\n  \n        if (counter !== null) {\n          const hashes = [];\n          const captions = [];\n          for (let i = counter; i >= 1; i -= 1) {\n            hashes.push(contract.methods.getHash(i).call({\n              from: account,\n            }));\n          }\n  \n          const postHashes = await Promise.all(hashes);\n  \n          for (let i = 0; i < postHashes.length; i += 1) {\n            captions.push(fetch(`https://gateway.ipfs.io/ipfs/${postHashes[i].text}`)\n              .then(res => res.text()));\n          }\n  \n          const postCaptions = await Promise.all(captions);\n  \n          for (let i = 0; i < postHashes.length; i += 1) {\n            posts.push({\n              id: i,\n              key: `key${i}`,\n              caption: postCaptions[i],\n              src: `https://gateway.ipfs.io/ipfs/${postHashes[i].img}`,\n            });\n          }\n  \n        //   this.currentPosts = posts;\n        loading = false;\n        }\n        // console.log(posts)\n        return posts\n      }\n\nexport {getPosts, updateAccount, onSubmit, handleOk, captureFile, captureCaption, created};"],"sourceRoot":""}