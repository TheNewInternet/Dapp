{"version":3,"sources":["contracts/contractInstance.js","pages/navbar/Navbar.js","pages/home/Home.js","pages/social/Post.js","pages/social/Feed.js","pages/social/Social.js","main.js","index.js","contracts/ipfs.js","api.js","contracts/web3.js"],"names":["Web3","eth","Contract","Navbar","className","to","Home","type","onClick","addNetwork","width","src","alt","Post","props","handleCaptionChange","bind","handlePhotoChange","handleSubmit","event","captureCaption","target","value","console","log","files","captureFile","captureFileType","preventDefault","handleOk","onSubmit","this","id","name","onChange","htmlFor","accept","hidden","React","Component","Blog","content","posts","map","post","fileType","startsWith","controls","caption","v4","getList","a","getPosts","Feed","init","created","Social","Main","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","ipfs","IPFS","host","protocol","account","buffer","loading","window","localStorage","getItem","undefined","currentWeb3","personal","newAccount","setItem","getBalance","balance","unlockAccount","getGasPrice","then","result","utils","fromWei","file","reader","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","_fileType","_caption","Buffer","from","alert","add","hashedImg","imgHash","hash","bufferDesc","hashedText","textHash","bufferType","hashedType","typeHash","methods","sendHash","send","error","transactionHash","once","options","address","getCounter","call","counter","hashes","captions","types","i","push","getHash","Promise","all","postHashes","length","fetch","text","res","postCaptions","postFileType","key","img","network","net","getId","toString","params","chainId","chainName","rpcUrls","ethereum","request","method","catch","message","require"],"mappings":"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","file":"static/js/main.3d53acd8.chunk.js","sourcesContent":["import Web3 from \"./web3\";\n\nconst address = \"0xAB3037FE6276284a5Dfed69Fe9d0A043Bf2Fa43F\";\nconst abi = [\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"NewPost\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"getCounter\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_index\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getHash\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"img\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"text\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"fileType\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_img\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_text\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_type\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"sendHash\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t}\n];\n\nexport default new Web3.eth.Contract(abi, address);\n","import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n  return (\n    <>\n      <nav className=\"navbar-item\">\n        <Link to=\"/\" className=\"navbar-logo\">\n          <div className=\"logo\">\n            <i className=\"fab fa-ethereum\" />\n            Instachain\n          </div>\n        </Link>\n        <div>\n          <Link to=\"/Feeds\" className=\"menu-icon\">\n            Feeds\n          </Link>\n          {/* <Link to=\"/Market\" className=\"menu-icon\">\n            Market\n          </Link> */}\n        </div>\n        {/* <div className=\"menu-icon \">\n          <Link to=\"/Connect\" className=\"navbar-logo\">\n            <i className=\"fas fa-link \"></i>\n          </Link>\n        </div> */}\n      </nav>\n    </>\n  );\n};\nexport default Navbar;\n","import \"./Home.css\";\nimport { addNetwork } from \"../../api\";\nconst Home = () => {\n  return <div className=\"home-index\">About\n  <h1>Instagram on blockchain</h1>\n  <h5>This project is still working in progress.</h5>\n  <h5>Use it at your own risk.</h5>\n  <button type=\"button\" className=\"btn btn-xss btn-soft-light text-nowrap d-flex align-items-center mr-2\" onClick={()=>{addNetwork()}} >\n<img className=\"mr-1\" width=\"15\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/MetaMask_Fox.svg/2048px-MetaMask_Fox.svg.png\" alt=\"Metamask\"/> Add Instachain Network\n</button>\n  </div>;\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./Post.css\";\nimport { captureCaption, captureFile, captureFileType, handleOk } from \"../../api\";\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.state = {\n    //   caption: \"Caption..\",\n    // };\n\n    this.handleCaptionChange = this.handleCaptionChange.bind(this);\n    this.handlePhotoChange = this.handlePhotoChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleCaptionChange(event) {\n    // this.setState({caption: event.target.value});\n    captureCaption(event.target.value);\n  }\n\n  handlePhotoChange(event) {\n    console.log(event.target.files[0]);\n    // this.setState({photo: event.target.files[0]});\n    captureFile(event.target.files[0]);\n    captureFileType(event.target.files[0].type);\n  }\n\n  handleSubmit(event) {\n    // alert(\"An caption was submitted: \" + this.state.caption);\n    event.preventDefault();\n    handleOk();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"post-index\">\n        <label className=\"post-item\">\n          <i className=\"fas fa-pen post-item-title\" />\n          <textarea\n            id=\"caption\"\n            name=\"caption\"\n            className=\"post-textarea\"\n            onChange={this.handleCaptionChange}\n          />\n        </label>\n        <label htmlFor=\"upload-input\" className=\"post-textarea\">\n              <i className=\"fas fa-folder-open fa-2x folder-icon\" id=\"fasfo\"></i>\n            </label>\n            <br/>\n        <input type=\"submit\" value=\"Submit\" className=\"post-submit-btn\" />\n\n          <div className=\"folder\">\n            <input\n              type=\"file\"\n              id=\"upload-input\"\n              accept=\".jpg,.jpeg,.gif,.png,.mov,.mp4\"\n              //className=\"post-img-input\"\n              onChange={this.handlePhotoChange}\n              hidden\n            />\n\n          </div>\n      </form>\n    );\n  }\n}\nexport default Post;\n","import \"./Feed.css\";\nimport { v4 } from \"uuid\";\nimport { useState } from \"react\";\nimport Post from \"./Post\";\n\nimport { getPosts } from \"../../api\";\n\nfunction Blog(props) {\n\n  const content = props.posts.map((post) => (\n    // <div className=\"blog-index-item\">{post.fileType}</div>\n    <div className=\"blog-index\" key={v4()}>\n       {post.fileType.startsWith(\"video\") ? (\n        <video src={post.src} alt=\"\" className=\"blog-index-img\" controls/>):(\n        <img src={post.src} alt=\"\" className=\"blog-index-img\" />)}\n        <div className=\"blog-index-img-border\">\n          <div className=\"blog-index-item\">{post.caption}</div>\n        </div>\n    </div>\n  ));\n  return <div>{content}</div>;\n}\n\nlet posts = [];\n\nconst getList = async () => {\n  posts = await getPosts();\n};\ngetList();\n\nconst Feed = () => {\n  return (\n    <div className=\"feed-index\">\n      <Post />\n      <Blog posts={posts} />\n    </div>\n  );\n};\n\nexport default Feed;\n","import \"./Social.css\";\n\nimport Post from \"./Post\";\nimport Feed from \"./Feed\";\nimport { created } from \"../../api\";\n// import Create from \"../../api\"\n\nconst init = async () => {\n  created();\n};\ninit();\n\nconst Social = () => {\n  return (\n    <div className=\"social-index\">\n      <Feed />\n    </div>\n  );\n};\n\nexport default Social;\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// import { UseWalletProvider } from \"use-wallet\";\n\nimport Navbar from \"./pages/navbar/Navbar\";\nimport Product from \"./pages/product/Product\";\nimport Market from \"./pages/market/Market\";\nimport Home from \"./pages/home/Home\";\nimport Connect from \"./pages/connect/Connect\";\nimport Social from \"./pages/social/Social\";\n\nfunction Main() {\n  return (\n    // <UseWalletProvider>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          {/* <Route path=\"/Product\" exact component={Product} /> */}\n          {/* <Route path=\"/Market\" exact component={Market} /> */}\n          <Route path=\"/Feeds\" exact component={Social} />\n          {/* <Route path=\"/Connect\" exact component={Connect} /> */}\n        </Switch>\n      </Router>\n    // </UseWalletProvider>\n  );\n}\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport Main from \"./main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","//imports the IPFS API\nimport IPFS from \"ipfs-http-client\";\n\n/**\n * creates & exports new instance for\n * IPFS using infura as host, for use.\n */\nconst ipfs = new IPFS({\n  // host: \"ipfs.infura.io\",\n  host: \"infura-ipfs.io\",\n  // host: \"cloudflare-ipfs.com\",\n  // host:\"ipfs.io\",\n  // host: \"gateway.ipfs.io\",\n  // host: \"localhost\",\n  // port: 5001,\n  protocol: \"https\",\n  // protocol: \"http\"\n});\nexport default ipfs;\n","import currentWeb3 from \"./contracts/web3\";\n// import Web3 from \"./contracts/web3\";\nimport ipfs from \"./contracts/ipfs\";\nimport Contract from \"./contracts/contractInstance\";\nimport { v4 } from \"uuid\";\nlet account = \"\";\nlet key = \"\";\nlet buffer = \"\";\nlet caption = \"\";\nlet fileType = \"\";\nlet loading = false;\n// window.localStorage.clear();\nconst init = async ()=>{\n  account = await window.localStorage.getItem('account')\nif (account!==undefined && account!==\"\" && account!==null){\n account = await window.localStorage.getItem('account')\n//  key = await window.localStorage.getItem('account_pwd')\n}else{\n  account = await currentWeb3.eth.personal.newAccount(\"\")\n  \n  // account = accountData['address']\n  await window.localStorage.setItem('account', account)\n  \n  // key = accountData['privateKey']  \n  // await window.localStorage.setItem('account_pwd', key)\n}\n\nconsole.log(`account: ${account}`)\nlet balance = await currentWeb3.eth.getBalance(account)\nconsole.log(`balance: ${balance}`)\n\n}\n(async () => {\n  await init()\n  await currentWeb3.eth.personal.unlockAccount(account, \"\", 0)\n  // all of the script.... \n  await currentWeb3.eth.getGasPrice().then((result) => {\n    console.log(currentWeb3.utils.fromWei(result, 'ether'))\n    })\n  \n})();\n\n// data variables\n// const data = ()=>{\n//   return {\n//     buffer: '',\n//     caption: '',\n//   };\n// }\n\n/* used to catch chosen image &\n * convert it to ArrayBuffer.\n */\nconst captureFile = (file) => {\n  const reader = new FileReader();\n  if (typeof file !== \"undefined\") {\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = async () => {\n      buffer = await convertToBuffer(reader.result);\n    };\n  } else buffer = \"\";\n};\n\nconst captureFileType = (_fileType) => {\n  fileType = _fileType;\n};\n\nconst captureCaption = (_caption) => {\n  caption = _caption;\n};\n\n/**\n * converts ArrayBuffer to\n * Buffer for IPFS upload.\n */\nconst convertToBuffer = async (reader) => {\n  return Buffer.from(reader);\n};\n\n/**\n * submits buffered image & text to IPFS\n * and retrieves the hashes, then store\n * it in the Contract via sendHash().\n */\nconst onSubmit = async () => {\n  alert(\"Uploading on IPFS...\");\n  console.log(loading)\n  loading = true;\n  let imgHash;\n\n  await ipfs\n    .add(buffer)\n    .then((hashedImg) => {\n      imgHash = hashedImg[0].hash;\n      console.log(imgHash);\n    })\n\n\n    let bufferDesc = await  convertToBuffer(caption);\n    let hashedText = await ipfs.add(bufferDesc)\n    let textHash = hashedText[0].hash\n    \n\n    console.log(`fileType: ${fileType}`)\n    let bufferType = await  convertToBuffer(fileType);\n    console.log(`bufferType: ${bufferType}`)\n    let hashedType = await ipfs.add(bufferType)\n    let typeHash =  hashedType[0].hash\n    console.log(`typeHash: ${typeHash}`)\n    console.log(loading)\n    console.log(typeof typeHash);\nconsole.log(account)\n// let balance = await currentWeb3.eth.getBalance(account)\n// console.log(`balance: ${balance}`)\n\n// currentWeb3.eth.personal.unlockAccount(account, \"\", 0).then(\n//   console.log('Account unlocked!')\n// )\n\n\n\n    await  Contract.methods\n        .sendHash(imgHash, textHash, typeHash)\n        .send({ from: account ,\n        //         gasLimit: currentWeb3.utils.toHex(42000),\n        //         gasPrice: currentWeb3.utils.toHex(5000000)\n              }, (error, transactionHash) => {\n          console.log(`transactionHash: ${transactionHash}`)\n          if (typeof transactionHash !== \"undefined\") {\n            alert(\"Storing on Ethereum...\");\n            Contract.once(\"NewPost\", { from: account }, () => {\n              getPosts();\n              alert(\"Operation Finished! Refetching...\");\n            });\n          }\n          loading = false;\n        })\n        console.log(loading)\n      }\n        \n\n/**\n * validates if image & captions\n * are filled before submission.\n */\nconst handleOk = () => {\n  //   console.log(_file)\n  //   let _buffer = captureFile(_file);\n  //   console.log(!_buffer)\n  if (!buffer || !caption) {\n    alert(\"Please fill in the media and caption.\");\n  } else {\n    onSubmit();\n  }\n};\n\nconst created = async () => {\n  // await updateAccount();\n  await getPosts();\n};\n\n// const updateAccount = async () => {\n//   const accounts = await Web3.eth.getAccounts();\n//   const _account = accounts[0];\n//   // this.currentAccount = account;\n//   account = _account;\n//   return _account;\n// };\n\nconst getPosts = async () => {\n  console.log(Contract.options.address)\n  loading = false;\n  const posts = [];\n  const counter = await Contract.methods.getCounter().call(\n    {\n    from: account,\n  }\n  );\n\n  console.log(counter);\n\n  if (counter !== null) {\n    const hashes = [];\n    const captions = [];\n    const types = [];\n    for (let i = counter; i >= 1; i -= 1) {\n      hashes.push(\n        Contract.methods.getHash(i).call({\n          from: account,\n        })\n      );\n    }\n\n    const postHashes = await Promise.all(hashes);\n\n    for (let i = 0; i < postHashes.length; i += 1) {\n      captions.push(\n        fetch(`https://ipfs.io/ipfs/${postHashes[i].text}`).then(\n          (res) => res.text()\n        )\n      );\n    }\n\n\n    for (let i = 0; i < postHashes.length; i += 1) {\n      types.push(\n        fetch(`https://ipfs.io/ipfs/${postHashes[i].fileType}`).then(\n          (res) => res.text()\n        )\n      );\n    }\n\n    const postCaptions = await Promise.all(captions);\n    const postFileType = await Promise.all(types);\n\n    for (let i = 0; i < postHashes.length; i += 1) {\n      posts.push({\n        id: i,\n        key: `key-${v4()}`,\n        caption: postCaptions[i],\n        fileType: postFileType[i],\n        src: `https://ipfs.io/ipfs/${postHashes[i].img}`,\n      });\n    }\n\n    //   this.currentPosts = posts;\n    loading = false;\n  }\n  // console.log(posts)\n  return posts;\n};\n\nvar eth;\n        var isTestnet = 'false';\n// var ethereum = \n        async function addNetwork(type='web3') {\n\n            // if (type === 'web3') {\n            //     if (typeof window.ethereum !== 'undefined') {\n            //         eth = await web3(window.ethereum);\n            //     } else if (typeof web3 !== 'undefined') {\n            //         eth = await web3(web3.givenProvider);\n            //     } else {\n            //         eth = await web3(window.ethereum);\n            //     }\n            // }\neth = currentWeb3.eth;\n            if (typeof eth !== 'undefined') {\n                var network = 0;\n                console.log(await eth.net.getId())\n                network = await eth.net.getId();\n                let netID = network.toString();\n                var params;\n                if (isTestnet == \"false\") {\n                    if (netID == \"9901\") {\n                        alert(\"Instachain Network has already been added to Metamask.\");\n                        return;\n                    } else {\n                        params = [\n                          {\n                            chainId: '0x26AD',\n                            chainName: 'Instachain',\n                        //     nativeCurrency: {\n                        //         name: 'FTM',\n                        //         symbol: 'FTM',\n                        //         decimals: 18\n                        //     },\n                            rpcUrls: ['http://66.228.52.222:8545'],\n                            // blockExplorerUrls: ['https://ftmscan.com/']\n                        }]\n                    }\n                } \n                // else {\n                //     if (netID == \"4002\") {\n                //         alert(\"Fantom Test Network has already been added to Metamask.\");\n                //         return;\n                //     } else {\n                //         params = [{\n                //             chainId: '0xfa2',\n                //             chainName: 'Fantom Testnet',\n                //             nativeCurrency: {\n                //                 name: 'FTM',\n                //                 symbol: 'FTM',\n                //                 decimals: 18\n                //             },\n                //             rpcUrls: ['https://rpc.testnet.fantom.network/'],\n                //             blockExplorerUrls: ['https://testnet.ftmscan.com/']\n                //         }]\n                //     }\n                // }\n\n                window.ethereum.request({ method: 'wallet_addEthereumChain', params })\n                    .then(() => console.log('Success'))\n                    .catch((error) => console.log(\"Error\", error.message));\n            } else {\n                alert('Unable to locate a compatible web3 browser!');\n            }\n        }\n\nexport {\n  getPosts,\n  // updateAccount,\n  onSubmit,\n  handleOk,\n  captureFile,\n  captureFileType,\n  captureCaption,\n  created,\n  addNetwork,\n};\n","//imports the Web3 API\nvar Web3 = require(\"web3\");\n// let params = [\n//   {\n//     chainId: '0x26AD',\n//     chainName: 'Instachain',\n// //     nativeCurrency: {\n// //         name: 'FTM',\n// //         symbol: 'FTM',\n// //         decimals: 18\n// //     },\n//     rpcUrls: ['http://66.228.52.222:8545'],\n//     // blockExplorerUrls: ['https://ftmscan.com/']\n// }]\n// window.ethereum.request({ method: 'wallet_addEthereumChain', params })\n//                     .then(() => console.log('Success'))\n//                     .catch((error) => console.log(\"Error\", error.message));\n\n/**\n * creates & exports new instance for\n * Web3 using provided service by Metamask.\n */\n let currentWeb3 = new Web3('http://66.228.52.222:8545');;\n//  (async () => {\n//   await window.web3.ethereum.enable();\n//  })();\n// if (window.ethereum) {\n//   let instance = new Web3(window.ethereum);\n//   try {\n//     // Request account access if needed\n//     window.ethereum.enable();\n//     // Acccounts now exposed\n//     currentWeb3 = instance;\n//   } catch (error) {\n//     // User denied account access...\n//     alert(\"Please allow access for the app to work\");\n//   }\n// } else if (window.web3) {\n//   currentWeb3 = new Web3(Web3.currentProvider);\n//   // Acccounts always exposed\n// } else {\n//   console.log(\n//     \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n//   );\n// }\n\nexport default currentWeb3;\n"],"sourceRoot":""}